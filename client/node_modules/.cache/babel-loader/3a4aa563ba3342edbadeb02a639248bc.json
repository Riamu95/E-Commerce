{"ast":null,"code":"import { Component, useEffect } from 'react';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Shop from './Pages/Shop/Shop.component';\nimport Header from './Components/Header/Header.component';\nimport SignInAndSignUp from './Pages/SignInAndSignUp/SignInAndSignUp.component';\nimport { connect } from 'react-redux';\nimport { selectCurrentUser } from './Redux/User/user.selector';\nimport CheckoutPage from './Pages/Checkout/Checkout.component';\nimport DirectoryComponent from './Components/Directory/Directory.component';\nimport { shopCollections } from './Redux/Shop/shop.selector';\nimport { selectIsFetching } from './Redux/Collections/collection.selector';\nimport { fetchCollectionsStart } from './Redux/Collections/CollectionActions';\nimport WithSpinner from './Components/WithSpinner/WithSpinner.component';\nimport { IsUserAuthenticatedStart } from './Redux/User/user-actions';\nconst DirectorySpinnerComponent = WithSpinner(DirectoryComponent);\n/*\r\nconst App = ({isFetching, checkIsUserAuthenticated, setCollectionTypes, currentUser}) => {\r\n  \r\n  useEffect(() => {\r\n    checkIsUserAuthenticated();\r\n  }, [checkIsUserAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    setCollectionTypes();\r\n  }, [ setCollectionTypes]);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <Switch>\r\n          <Route exact path='/' render={(props) => <DirectorySpinnerComponent isLoading={isFetching} {...props} />}/>\r\n          <Route  path='/shop' component={Shop}/>\r\n          <Route exact path='/contact' component={Shop}/>\r\n          <Route exact path='/signin' render = { () => currentUser ? (<Redirect to='/shop'/>) : (<SignInAndSignUp/>) }/>\r\n          <Route exact path='/checkout' component={CheckoutPage}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser : selectCurrentUser(state),\r\n  collections : shopCollections(state),\r\n  isFetching : selectIsFetching(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCollectionTypes : () => dispatch(fetchCollectionsStart()),\r\n  checkIsUserAuthenticated : () => dispatch(IsUserAuthenticatedStart())\r\n});\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n*/\n\n/*\r\nclass  App extends Component\r\n{\r\n\r\n  componentDidMount()\r\n  {\r\n     const { checkIsUserAuthenticated, setCollectionTypes } = this.props;\r\n     checkIsUserAuthenticated();\r\n     setCollectionTypes();\r\n  }\r\n  render()\r\n  {\r\n    const { loading } = this.props.isFetching;\r\n    return (\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <Switch>\r\n          <Route exact path='/' render={(props) => <DirectorySpinnerComponent isLoading={loading} {...props}/>}/>\r\n          <Route  path='/shop' component={Shop}/>\r\n          <Route exact path='/contact' component={Shop}/>\r\n          <Route exact path='/signin' render = { () => this.props.currentUser ? (<Redirect to='/shop'/>) : (<SignInAndSignUp/>) }/>\r\n          <Route exact path='/checkout' component={CheckoutPage}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser : selectCurrentUser(state),\r\n  collections : shopCollections(state),\r\n  isFetching : selectIsFetching(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCollectionTypes : () => dispatch(fetchCollectionsStart()),\r\n  checkIsUserAuthenticated : ( ) => dispatch(IsUserAuthenticatedStart())\r\n});\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n*/\n\n_c = DirectorySpinnerComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"DirectorySpinnerComponent\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/App.js"],"names":["Component","useEffect","Switch","Route","Redirect","Shop","Header","SignInAndSignUp","connect","selectCurrentUser","CheckoutPage","DirectoryComponent","shopCollections","selectIsFetching","fetchCollectionsStart","WithSpinner","IsUserAuthenticatedStart","DirectorySpinnerComponent"],"mappings":"AAAA,SAASA,SAAT,EAAqBC,SAArB,QAAqC,OAArC;AACA,OAAO,WAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,OAAQC,IAAR,MAAkB,6BAAlB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,gBAAT,QAAiC,yCAAjC;AACA,SAASC,qBAAT,QAAsC,uCAAtC;AACA,OAAOC,WAAP,MAAwB,gDAAxB;AACA,SAASC,wBAAT,QAAyC,2BAAzC;AAEA,MAAMC,yBAAyB,GAAGF,WAAW,CAACJ,kBAAD,CAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KAnFMM,yB","sourcesContent":["import { Component , useEffect} from 'react';\r\nimport './App.css';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport  Shop from './Pages/Shop/Shop.component';\r\nimport Header from './Components/Header/Header.component';\r\nimport SignInAndSignUp from './Pages/SignInAndSignUp/SignInAndSignUp.component';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectCurrentUser } from './Redux/User/user.selector';\r\nimport CheckoutPage from './Pages/Checkout/Checkout.component';\r\nimport DirectoryComponent from './Components/Directory/Directory.component';\r\nimport { shopCollections } from './Redux/Shop/shop.selector';\r\nimport { selectIsFetching } from './Redux/Collections/collection.selector';\r\nimport { fetchCollectionsStart } from './Redux/Collections/CollectionActions';\r\nimport WithSpinner from './Components/WithSpinner/WithSpinner.component';\r\nimport { IsUserAuthenticatedStart } from './Redux/User/user-actions';\r\n\r\nconst DirectorySpinnerComponent = WithSpinner(DirectoryComponent);\r\n\r\n/*\r\nconst App = ({isFetching, checkIsUserAuthenticated, setCollectionTypes, currentUser}) => {\r\n  \r\n  useEffect(() => {\r\n    checkIsUserAuthenticated();\r\n  }, [checkIsUserAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    setCollectionTypes();\r\n  }, [ setCollectionTypes]);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <Switch>\r\n          <Route exact path='/' render={(props) => <DirectorySpinnerComponent isLoading={isFetching} {...props} />}/>\r\n          <Route  path='/shop' component={Shop}/>\r\n          <Route exact path='/contact' component={Shop}/>\r\n          <Route exact path='/signin' render = { () => currentUser ? (<Redirect to='/shop'/>) : (<SignInAndSignUp/>) }/>\r\n          <Route exact path='/checkout' component={CheckoutPage}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser : selectCurrentUser(state),\r\n  collections : shopCollections(state),\r\n  isFetching : selectIsFetching(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCollectionTypes : () => dispatch(fetchCollectionsStart()),\r\n  checkIsUserAuthenticated : () => dispatch(IsUserAuthenticatedStart())\r\n});\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n*/\r\n\r\n\r\n/*\r\nclass  App extends Component\r\n{\r\n\r\n  componentDidMount()\r\n  {\r\n     const { checkIsUserAuthenticated, setCollectionTypes } = this.props;\r\n     checkIsUserAuthenticated();\r\n     setCollectionTypes();\r\n  }\r\n  render()\r\n  {\r\n    const { loading } = this.props.isFetching;\r\n    return (\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <Switch>\r\n          <Route exact path='/' render={(props) => <DirectorySpinnerComponent isLoading={loading} {...props}/>}/>\r\n          <Route  path='/shop' component={Shop}/>\r\n          <Route exact path='/contact' component={Shop}/>\r\n          <Route exact path='/signin' render = { () => this.props.currentUser ? (<Redirect to='/shop'/>) : (<SignInAndSignUp/>) }/>\r\n          <Route exact path='/checkout' component={CheckoutPage}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser : selectCurrentUser(state),\r\n  collections : shopCollections(state),\r\n  isFetching : selectIsFetching(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCollectionTypes : () => dispatch(fetchCollectionsStart()),\r\n  checkIsUserAuthenticated : ( ) => dispatch(IsUserAuthenticatedStart())\r\n});\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n*/"]},"metadata":{},"sourceType":"module"}