{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Predator\\\\Documents\\\\E-Commerce\\\\src\\\\Components\\\\Collection-Preview\\\\CollectionPreview.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CollectionItem from '../CollectionItem/CollectionItem.component';\nimport { useSelector } from 'react-redux';\nimport { withRouter, useParams, useHistory } from 'react-router-dom';\nimport { selectCollectionItems } from '../../Redux/Shop/shop.selector';\nimport { ReactComponent as LeftArrowLogo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../Assets/leftArrow.svg\";\nimport { ReactComponent as RightArrowLogo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../Assets/rightArrow.svg\";\nimport { CollectionPreviewContainer, TitleContainer, PreviewContainer, LeftArrowContainer, RightArrowContainer } from './Collection-Preview.styles';\nimport WithSpinner from '../WithSpinner/WithSpinner.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport { LeftArrowLogo, RightArrowLogo };\n\nconst ColllectionPreview = props => {\n  _s();\n\n  //const { title } = useParams();\n  const history = useHistory();\n  const shopItems = useSelector(state => selectCollectionItems(props.collectionCategory.title)(state));\n  const [state, setState] = useState = {\n    startIndex: 0,\n    endIndex: 3,\n    maxItems: shopItems.items ? shopItems.items.length - 1 : 0,\n    previewCount: 4,\n    title: this.props.collectionCategory.title\n  };\n  /*\r\n  constructor(props)\r\n  {\r\n      super(props);\r\n      this.state = {\r\n          startIndex : 0,\r\n          endIndex : 3,\r\n          maxItems :  props.shopItems.items?  props.shopItems.items.length -1 : 0,\r\n          previewCount  : 4,\r\n          title : this.props.collectionCategory.title\r\n      };\r\n  }*/\n\n  const onArrowClick = direction => {\n    //max amount of items to preview on screen per category\n    const previewCount = state.previewCount; //caluclate offset from array boundary to closest index based on direction\n\n    const diff = direction === 'right' ? state.maxItems - state.endIndex : (0 - state.startIndex) * -1; //if at array boundary do nothing\n\n    if (diff === 0) return null; //if array boundary is closer than the max amount 0of items we can display on screen\n    //move furthest index to render newest item\n    //move closest index to render the last item\n\n    diff <= previewCount ? direction === 'left' ? setState({\n      endIndex: state.startIndex - 1,\n      startIndex: state.startIndex - diff\n    }) : setState({\n      startIndex: state.endIndex + 1,\n      endIndex: state.endIndex + diff\n    }) : direction === 'left' ? setState({\n      endIndex: state.startIndex - 1,\n      startIndex: state.startIndex - previewCount\n    }) : setState({\n      startIndex: state.endIndex + 1,\n      endIndex: state.endIndex + previewCount\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CollectionPreviewContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TitleContainer, {\n      onClick: () => history.push(`${this.props.match.url}/${state.title}`),\n      children: [\" \", state.title.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PreviewContainer, {\n      children: [/*#__PURE__*/_jsxDEV(LeftArrowContainer, {\n        onClick: () => onArrowClick('left')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), //render only the indexs we have chosen max of 4\n      shopItems.items.filter((item, idx) => idx >= state.startIndex && idx <= state.endIndex).map(item => /*#__PURE__*/_jsxDEV(CollectionItem, { ...item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(RightArrowContainer, {\n        onClick: () => onArrowClick('right')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ColllectionPreview, \"9SQ/XAaUindqu0rIdQwAnU37224=\", false, function () {\n  return [useHistory, useSelector];\n});\n\n_c = ColllectionPreview;\nexport default _c2 = withRouter(ColllectionPreview);\n/*\r\nclass  ColllectionPreview extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            startIndex : 0,\r\n            endIndex : 3,\r\n            maxItems :  props.shopItems.items?  props.shopItems.items.length -1 : 0,\r\n            previewCount  : 4,\r\n            title : this.props.collectionCategory.title\r\n        };\r\n    }\r\n\r\n    const { title } = useParams();\r\n\r\n    const shopItems = useSelector((title, state) => selectCollectionItems(ownProps.collectionCategory.title)(state));\r\n\r\n    onArrowClick = (direction) => {\r\n        //max amount of items to preview on screen per category\r\n        const previewCount = this.state.previewCount;\r\n        //caluclate offset from array boundary to closest index based on direction\r\n        const diff = direction  === 'right' ? (this.state.maxItems - this.state.endIndex) :  ((0 - this.state.startIndex) * -1);\r\n        //if at array boundary do nothing\r\n        if(diff === 0)\r\n            return null;\r\n            //if array boundary is closer than the max amount 0of items we can display on screen\r\n            //move furthest index to render newest item\r\n            //move closest index to render the last item\r\n            diff <= previewCount ?\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - diff}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + diff})\r\n            :\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - previewCount}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + previewCount})\r\n\r\n    };\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <CollectionPreviewContainer> \r\n                <TitleContainer  onClick={ () => this.props.history.push(`${this.props.match.url}/${this.state.title}`)}> {this.state.title.toUpperCase()}</TitleContainer>\r\n                <PreviewContainer>\r\n                    <LeftArrowContainer onClick={() => this.onArrowClick('left')}/>\r\n                   {                                          //render only the indexs we have chosen max of 4\r\n                        this.props.shopItems.items.filter((item, idx) => (idx >= this.state.startIndex && idx <= this.state.endIndex) )\r\n                        .map((item) => (\r\n                            <CollectionItem key={item.id} {...item} /> \r\n                        ))\r\n                    }\r\n                    <RightArrowContainer onClick={() => this.onArrowClick('right')}/>\r\n                </PreviewContainer>\r\n            </CollectionPreviewContainer>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(ColllectionPreview);\r\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ColllectionPreview\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Components/Collection-Preview/CollectionPreview.component.js"],"names":["React","useState","CollectionItem","useSelector","withRouter","useParams","useHistory","selectCollectionItems","CollectionPreviewContainer","TitleContainer","PreviewContainer","LeftArrowContainer","RightArrowContainer","WithSpinner","LeftArrowLogo","RightArrowLogo","ColllectionPreview","props","history","shopItems","state","collectionCategory","title","setState","startIndex","endIndex","maxItems","items","length","previewCount","onArrowClick","direction","diff","push","match","url","toUpperCase","filter","item","idx","map","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport CollectionItem from '../CollectionItem/CollectionItem.component';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter, useParams, useHistory } from 'react-router-dom'; \r\nimport {selectCollectionItems} from '../../Redux/Shop/shop.selector';\r\nimport { ReactComponent as LeftArrowLogo} from '../../Assets/leftArrow.svg';\r\nimport { ReactComponent as RightArrowLogo} from '../../Assets/rightArrow.svg';\r\nimport { CollectionPreviewContainer, TitleContainer , PreviewContainer, LeftArrowContainer, RightArrowContainer} from './Collection-Preview.styles';\r\nimport WithSpinner from '../WithSpinner/WithSpinner.component';\r\nexport  { LeftArrowLogo, RightArrowLogo };\r\n\r\nconst ColllectionPreview = (props) => \r\n{\r\n    //const { title } = useParams();\r\n    const history = useHistory();\r\n    const shopItems = useSelector((state) => selectCollectionItems(props.collectionCategory.title)(state));\r\n    \r\n    const [state,setState] = useState = ({\r\n        startIndex : 0,\r\n        endIndex : 3,\r\n        maxItems : shopItems.items? shopItems.items.length -1 : 0,\r\n        previewCount  : 4,\r\n        title : this.props.collectionCategory.title\r\n    });\r\n\r\n    /*\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            startIndex : 0,\r\n            endIndex : 3,\r\n            maxItems :  props.shopItems.items?  props.shopItems.items.length -1 : 0,\r\n            previewCount  : 4,\r\n            title : this.props.collectionCategory.title\r\n        };\r\n    }*/\r\n\r\n    const onArrowClick = (direction) => {\r\n        //max amount of items to preview on screen per category\r\n        const previewCount = state.previewCount;\r\n        //caluclate offset from array boundary to closest index based on direction\r\n        const diff = direction  === 'right' ? (state.maxItems - state.endIndex) :  ((0 - state.startIndex) * -1);\r\n        //if at array boundary do nothing\r\n        if(diff === 0)\r\n            return null;\r\n            //if array boundary is closer than the max amount 0of items we can display on screen\r\n            //move furthest index to render newest item\r\n            //move closest index to render the last item\r\n            diff <= previewCount ?\r\n                direction === 'left' ?  setState({ endIndex : state.startIndex - 1, startIndex : state.startIndex - diff}) :\r\n                setState({ startIndex : state.endIndex + 1, endIndex : state.endIndex + diff})\r\n            :\r\n                direction === 'left' ?  setState({ endIndex : state.startIndex - 1, startIndex : state.startIndex - previewCount}) :\r\n                setState({ startIndex : state.endIndex + 1, endIndex : state.endIndex + previewCount})\r\n\r\n    };\r\n\r\n  \r\n    return(\r\n        <CollectionPreviewContainer> \r\n            <TitleContainer  onClick={ () => history.push(`${this.props.match.url}/${state.title}`)}> {state.title.toUpperCase()}</TitleContainer>\r\n            <PreviewContainer>\r\n                <LeftArrowContainer onClick={() => onArrowClick('left')}/>\r\n                {                                          //render only the indexs we have chosen max of 4\r\n                    shopItems.items.filter((item, idx) => (idx >= state.startIndex && idx <= state.endIndex) )\r\n                    .map((item) => (\r\n                        <CollectionItem key={item.id} {...item} /> \r\n                    ))\r\n                }\r\n                <RightArrowContainer onClick={() => onArrowClick('right')}/>\r\n            </PreviewContainer>\r\n        </CollectionPreviewContainer>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default withRouter(ColllectionPreview);\r\n\r\n\r\n/*\r\nclass  ColllectionPreview extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            startIndex : 0,\r\n            endIndex : 3,\r\n            maxItems :  props.shopItems.items?  props.shopItems.items.length -1 : 0,\r\n            previewCount  : 4,\r\n            title : this.props.collectionCategory.title\r\n        };\r\n    }\r\n\r\n    const { title } = useParams();\r\n\r\n    const shopItems = useSelector((title, state) => selectCollectionItems(ownProps.collectionCategory.title)(state));\r\n\r\n    onArrowClick = (direction) => {\r\n        //max amount of items to preview on screen per category\r\n        const previewCount = this.state.previewCount;\r\n        //caluclate offset from array boundary to closest index based on direction\r\n        const diff = direction  === 'right' ? (this.state.maxItems - this.state.endIndex) :  ((0 - this.state.startIndex) * -1);\r\n        //if at array boundary do nothing\r\n        if(diff === 0)\r\n            return null;\r\n            //if array boundary is closer than the max amount 0of items we can display on screen\r\n            //move furthest index to render newest item\r\n            //move closest index to render the last item\r\n            diff <= previewCount ?\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - diff}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + diff})\r\n            :\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - previewCount}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + previewCount})\r\n\r\n    };\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <CollectionPreviewContainer> \r\n                <TitleContainer  onClick={ () => this.props.history.push(`${this.props.match.url}/${this.state.title}`)}> {this.state.title.toUpperCase()}</TitleContainer>\r\n                <PreviewContainer>\r\n                    <LeftArrowContainer onClick={() => this.onArrowClick('left')}/>\r\n                   {                                          //render only the indexs we have chosen max of 4\r\n                        this.props.shopItems.items.filter((item, idx) => (idx >= this.state.startIndex && idx <= this.state.endIndex) )\r\n                        .map((item) => (\r\n                            <CollectionItem key={item.id} {...item} /> \r\n                        ))\r\n                    }\r\n                    <RightArrowContainer onClick={() => this.onArrowClick('right')}/>\r\n                </PreviewContainer>\r\n            </CollectionPreviewContainer>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(ColllectionPreview);\r\n*/"]},"metadata":{},"sourceType":"module"}