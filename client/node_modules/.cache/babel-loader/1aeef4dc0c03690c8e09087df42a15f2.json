{"ast":null,"code":"import { userActionTypes } from \"./UserAcionTypes\";\nimport { auth, provider, createUserProfileDocument, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { put, takeLatest, all, call } from 'redux-saga/effects';\nimport { SignInSuccess, SignInFail, UserSignOutSuccess, UserSignOutFail } from \"./user-actions\";\n\nfunction* onGoogleStartSignIn() {\n  const userAuth = yield auth.signInWithPopup(provider);\n\n  if (userAuth) {\n    try {\n      const userRef = yield createUserProfileDocument(userAuth.user, '');\n      yield convertRefToSnapshot(userRef.user);\n    } catch (err) {\n      yield put(SignInFail({\n        error: err\n      }));\n    }\n  }\n}\n\n;\n\nfunction* GoogleStartSignIn() {\n  yield takeLatest(userActionTypes.GOOGLE_START_SIGNIN, onGoogleStartSignIn);\n}\n\n_c = GoogleStartSignIn;\n;\n\nfunction* convertRefToSnapshot(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user, '');\n    const snapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (err) {\n    yield put(SignInFail({\n      error: err\n    }));\n  }\n}\n\n;\n\nfunction* onEmailStartSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const userAuth = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(convertRefToSnapshot, userAuth.user);\n  } catch (err) {\n    yield put(SignInFail({\n      error: err\n    }));\n  }\n}\n\n;\n\nfunction* onUserSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(UserSignOutSuccess());\n  } catch (err) {\n    yield put(UserSignOutFail({\n      error: err\n    }));\n  }\n}\n\n;\n\nfunction* EmailStartSignIn() {\n  yield takeLatest(userActionTypes.EMAIL_START_SIGNIN, onEmailStartSignIn);\n}\n\n_c2 = EmailStartSignIn;\n;\n\nfunction* UserSignOut() {\n  yield takeLatest(userActionTypes.USER_SIGN_OUT_START, onUserSignOut);\n}\n\n_c3 = UserSignOut;\n;\n\nfunction* isUserAuthenticated() {\n  const unsubsrcibe = yield auth.onAuthStateChanged(userAuth => {\n    if (!userAuth) return;\n    console.log('lolllllllll', userAuth);\n    call(convertRefToSnapshot, user);\n  });\n  yield unsubsrcibe();\n}\n\nfunction* onIsUserAuthenticated() {\n  yield takeLatest(userActionTypes.IS_USER_AUTHENTICATED, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([call(GoogleStartSignIn), call(EmailStartSignIn), call(UserSignOut), call(onIsUserAuthenticated)]);\n}\n;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GoogleStartSignIn\");\n$RefreshReg$(_c2, \"EmailStartSignIn\");\n$RefreshReg$(_c3, \"UserSignOut\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Redux/User/User-Sagas.js"],"names":["userActionTypes","auth","provider","createUserProfileDocument","convertCollectionTypeSnapshotToMap","put","takeLatest","all","call","SignInSuccess","SignInFail","UserSignOutSuccess","UserSignOutFail","onGoogleStartSignIn","userAuth","signInWithPopup","userRef","user","convertRefToSnapshot","err","error","GoogleStartSignIn","GOOGLE_START_SIGNIN","snapshot","get","id","data","onEmailStartSignIn","payload","email","password","signInWithEmailAndPassword","onUserSignOut","signOut","EmailStartSignIn","EMAIL_START_SIGNIN","UserSignOut","USER_SIGN_OUT_START","isUserAuthenticated","unsubsrcibe","onAuthStateChanged","console","log","onIsUserAuthenticated","IS_USER_AUTHENTICATED","userSagas"],"mappings":"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","sourcesContent":["import { userActionTypes } from \"./UserAcionTypes\";\r\nimport { auth, provider, createUserProfileDocument, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\r\nimport { put, takeLatest, all ,call } from 'redux-saga/effects';\r\nimport { SignInSuccess, SignInFail\r\n,  UserSignOutSuccess, UserSignOutFail } from \"./user-actions\";\r\n\r\nfunction* onGoogleStartSignIn()\r\n{\r\n   const userAuth = yield auth.signInWithPopup(provider);\r\n    if(userAuth)\r\n    {\r\n        try {\r\n            const userRef = yield createUserProfileDocument(userAuth.user, '');\r\n           yield convertRefToSnapshot(userRef.user);\r\n        }catch(err)\r\n        {\r\n            yield put(SignInFail({ error: err}));\r\n        }\r\n    }\r\n};\r\n\r\nfunction* GoogleStartSignIn()\r\n{\r\n   yield takeLatest(userActionTypes.GOOGLE_START_SIGNIN, onGoogleStartSignIn);\r\n};\r\n\r\nfunction* convertRefToSnapshot(user)\r\n{\r\n    try {\r\n         const userRef = yield call(createUserProfileDocument,user, '');\r\n         const snapshot = yield userRef.get();\r\n         yield put(SignInSuccess({ id : snapshot.id, ...snapshot.data() }));\r\n    }\r\n    catch (err) {\r\n        yield put(SignInFail({ error: err}));\r\n    }\r\n};\r\n\r\nfunction* onEmailStartSignIn({ payload : {email, password }})\r\n{\r\n    try {\r\n        const userAuth = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield call(convertRefToSnapshot,userAuth.user);\r\n    }\r\n    catch ( err) {\r\n        yield put(SignInFail({ error: err}));\r\n    }\r\n};\r\n\r\nfunction* onUserSignOut()\r\n{\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(UserSignOutSuccess());\r\n    }\r\n    catch ( err) {\r\n        yield put(UserSignOutFail({ error: err}));\r\n    }\r\n   \r\n};\r\n\r\nfunction* EmailStartSignIn()\r\n{\r\n   yield takeLatest(userActionTypes.EMAIL_START_SIGNIN, onEmailStartSignIn);\r\n};\r\n\r\nfunction* UserSignOut()\r\n{\r\n   yield takeLatest(userActionTypes.USER_SIGN_OUT_START, onUserSignOut);\r\n};\r\n\r\nfunction* isUserAuthenticated()\r\n{\r\n    const unsubsrcibe = yield auth.onAuthStateChanged( userAuth => {\r\n        \r\n        if(!userAuth) return;\r\n        console.log('lolllllllll' , userAuth)\r\n        call(convertRefToSnapshot, user);\r\n    });\r\n\r\n    yield unsubsrcibe();\r\n\r\n  \r\n}\r\n\r\nfunction* onIsUserAuthenticated()\r\n{\r\n    yield takeLatest(userActionTypes.IS_USER_AUTHENTICATED,isUserAuthenticated)\r\n}\r\n\r\nexport function* userSagas()\r\n{\r\n    yield all([call(GoogleStartSignIn), call(EmailStartSignIn), call(UserSignOut), call(onIsUserAuthenticated)]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}