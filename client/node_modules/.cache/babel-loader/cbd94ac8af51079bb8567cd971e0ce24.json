{"ast":null,"code":"import { all, call, takeLatest, put } from \"@redux-saga/core/effects\";\nimport { shopActionTypes } from './ShopActionTypes';\nimport { shopUpdateSuccess, shopUpdateFail } from './ShopActions';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nfunction* ItemsUpdate() {\n  try {\n    const collectionRef = yield firestore.collection('Collections');\n    const snap = yield collectionRef.get();\n    const collections = yield call(convertCollectionsSnapshotToMap, snap);\n    yield put(shopUpdateSuccess(collections));\n  } catch (err) {\n    yield put(shopUpdateFail(err));\n  }\n}\n\n_c = ItemsUpdate;\n;\n\nfunction* onItemsUpdate() {\n  yield takeLatest(shopActionTypes.UPDATE_ITEMS_START, ItemsUpdate);\n}\n\n;\nexport function* shopSaga() {\n  yield all([call(onItemsUpdate)]);\n}\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemsUpdate\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/client/src/Redux/Shop/ShopSagas.js"],"names":["all","call","takeLatest","put","shopActionTypes","shopUpdateSuccess","shopUpdateFail","firestore","convertCollectionsSnapshotToMap","ItemsUpdate","collectionRef","collection","snap","get","collections","err","onItemsUpdate","UPDATE_ITEMS_START","shopSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,0BAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAiD,eAAjD;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;;AAEA,UAAUC,WAAV,GACA;AACI,MAAI;AACA,UAAMC,aAAa,GAAG,MAAMH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAnB;AACA,UAAMC,WAAW,GAAG,MAAMb,IAAI,CAACO,+BAAD,EAAkCI,IAAlC,CAA9B;AACA,UAAMT,GAAG,CAACE,iBAAiB,CAACS,WAAD,CAAlB,CAAT;AACH,GALD,CAMA,OAAOC,GAAP,EACA;AACI,UAAMZ,GAAG,CAACG,cAAc,CAACS,GAAD,CAAf,CAAT;AACH;AACJ;;KAZSN,W;AAYT;;AAED,UAAUO,aAAV,GACA;AACI,QAAMd,UAAU,CAACE,eAAe,CAACa,kBAAjB,EAAqCR,WAArC,CAAhB;AACH;;AAAA;AAED,OAAO,UAAUS,QAAV,GAAqB;AACtB,QAAMlB,GAAG,CAAC,CAACC,IAAI,CAACe,aAAD,CAAL,CAAD,CAAT;AACL;AAAA","sourcesContent":["import { all, call, takeLatest, put } from \"@redux-saga/core/effects\";\r\nimport { shopActionTypes } from './ShopActionTypes';\r\nimport { shopUpdateSuccess, shopUpdateFail} from './ShopActions';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nfunction* ItemsUpdate()\r\n{\r\n    try {\r\n        const collectionRef = yield firestore.collection('Collections');\r\n        const snap = yield collectionRef.get();\r\n        const collections = yield call(convertCollectionsSnapshotToMap, snap);\r\n        yield put(shopUpdateSuccess(collections));\r\n    }\r\n    catch (err)\r\n    {\r\n        yield put(shopUpdateFail(err))\r\n    }\r\n};\r\n\r\nfunction* onItemsUpdate()\r\n{\r\n    yield takeLatest(shopActionTypes.UPDATE_ITEMS_START, ItemsUpdate);\r\n};\r\n\r\nexport function* shopSaga() {\r\n      yield all([call(onItemsUpdate)])\r\n};"]},"metadata":{},"sourceType":"module"}