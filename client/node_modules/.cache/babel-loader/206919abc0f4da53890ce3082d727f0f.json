{"ast":null,"code":"import React from 'react';\nimport { Route, withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../Components/CollectionsOverview/CollectionsOverview.component';\nimport CollectionsPage from '../Collection/CollectionsPage.component';\nimport ItemPage from '../Item/ItemPage.component';\nimport WithSpinner from '../../Components/WithSpinner/WithSpinner.component';\nimport { getIsLoading } from '../../Redux/Shop/shop.selector';\nimport { shopUpdateStart } from '../../Redux/Shop/ShopActions';\nconst CollectionsOverviewSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewSpinner;\nconst CollectionsPageSpinner = WithSpinner(CollectionsPage);\n_c2 = CollectionsPageSpinner;\nconst ItemPageSpinner = WithSpinner(ItemPage);\n/*\r\nclass  Shop extends React.Component  {\r\n   \r\n   componentDidMount()\r\n   {\r\n       this.props.updateCollections();\r\n   }\r\n   \r\n   render()\r\n   {\r\n        const { isLoading , match} = this.props;\r\n        return(\r\n                <div>\r\n                    <Route  exact path={`${match.path}`} render = { (props) => <CollectionsOverviewSpinner  isLoading={isLoading} {...props} />}/>\r\n                    <Route exact  path = {`${match.path}/:collectionId`}  render = { (props) => <CollectionsPageSpinner  isLoading={isLoading} {...props} />}/>\r\n                    <Route   path = {`${match.path}/:collectionId/:itemId`} render={ (props) => <ItemPageSpinner isLoading={isLoading} {...props}/>}/> \r\n            </div>\r\n        );\r\n   }    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoading : getIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections : () => dispatch(shopUpdateStart())\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Shop));\r\n*/\n\n_c3 = ItemPageSpinner;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CollectionsOverviewSpinner\");\n$RefreshReg$(_c2, \"CollectionsPageSpinner\");\n$RefreshReg$(_c3, \"ItemPageSpinner\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Pages/Shop/Shop.component.js"],"names":["React","Route","withRouter","connect","CollectionsOverview","CollectionsPage","ItemPage","WithSpinner","getIsLoading","shopUpdateStart","CollectionsOverviewSpinner","CollectionsPageSpinner","ItemPageSpinner"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,cAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,oEAAhC;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAOC,WAAP,MAAwB,oDAAxB;AAEA,SAASC,YAAT,QAA4B,gCAA5B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AAIA,MAAMC,0BAA0B,GAAGH,WAAW,CAACH,mBAAD,CAA9C;KAAMM,0B;AACN,MAAMC,sBAAsB,GAAGJ,WAAW,CAACF,eAAD,CAA1C;MAAMM,sB;AACN,MAAMC,eAAe,GAAGL,WAAW,CAACD,QAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAhCMM,e","sourcesContent":["import React from 'react';\r\n\r\nimport { Route, withRouter } from 'react-router';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverview from '../../Components/CollectionsOverview/CollectionsOverview.component';\r\nimport CollectionsPage from '../Collection/CollectionsPage.component';\r\nimport ItemPage from '../Item/ItemPage.component';\r\n\r\nimport WithSpinner from '../../Components/WithSpinner/WithSpinner.component';\r\n\r\nimport { getIsLoading} from '../../Redux/Shop/shop.selector';\r\nimport { shopUpdateStart } from '../../Redux/Shop/ShopActions';\r\n\r\n\r\n\r\nconst CollectionsOverviewSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionsPageSpinner = WithSpinner(CollectionsPage);\r\nconst ItemPageSpinner = WithSpinner(ItemPage);\r\n\r\n/*\r\nclass  Shop extends React.Component  {\r\n   \r\n   componentDidMount()\r\n   {\r\n       this.props.updateCollections();\r\n   }\r\n   \r\n   render()\r\n   {\r\n        const { isLoading , match} = this.props;\r\n        return(\r\n                <div>\r\n                    <Route  exact path={`${match.path}`} render = { (props) => <CollectionsOverviewSpinner  isLoading={isLoading} {...props} />}/>\r\n                    <Route exact  path = {`${match.path}/:collectionId`}  render = { (props) => <CollectionsPageSpinner  isLoading={isLoading} {...props} />}/>\r\n                    <Route   path = {`${match.path}/:collectionId/:itemId`} render={ (props) => <ItemPageSpinner isLoading={isLoading} {...props}/>}/> \r\n            </div>\r\n        );\r\n   }    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoading : getIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections : () => dispatch(shopUpdateStart())\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Shop));\r\n*/"]},"metadata":{},"sourceType":"module"}