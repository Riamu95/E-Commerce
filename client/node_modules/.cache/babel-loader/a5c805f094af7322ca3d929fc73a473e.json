{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Predator\\\\Documents\\\\E-Commerce\\\\src\\\\Components\\\\SignUp\\\\SignUp.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './SignUp.style.scss';\nimport FormInput from '../FormInput/FormInput.component';\nimport Button from '../Button/Button.component';\nimport { UserSignUpStart } from '../../Redux/User/user-actions';\nimport { connect } from 'react-redux';\nimport { render } from 'node-sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignUp = () => {\n  _s();\n\n  const [displayName, setDisplayName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const handleSubmit = async event => {\n    event.preventDefault(); // const { displayName , email, password, confirmPassword } = this.state;\n\n    if (password !== confirmPassword) {\n      alert(\"password don't match\");\n      return;\n    }\n\n    this.props.onUserSignUp({\n      displayName,\n      email,\n      password\n    });\n    setDisplayName('');\n    setEmail('');\n    setPassword('');\n    setConfirmPassword('');\n  };\n\n  render( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-up\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Don't have an account?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign up with your name, email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        name: \"displayName\",\n        label: \"Display Name\",\n        value: displayName,\n        onChange: event => setDisplayName(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"Email\",\n        name: \"email\",\n        label: \"Email\",\n        value: email,\n        onChange: event => setEmail(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"Password\",\n        name: \"password\",\n        label: \"Password\",\n        value: password,\n        onChange: event => setPassword(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"Password\",\n        name: \"confirmPassword\",\n        label: \"Confirm Password\",\n        value: confirmPassword,\n        onChange: event => setConfirmPassword(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Sign Up\",\n        type: \"submit\",\n        className: \"custom-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 13\n  }, this));\n};\n\n_s(SignUp, \"YOLPIF1dlI8fLtJdUGCeSEPwfWg=\");\n\n_c = SignUp;\n\nconst mapDispatchToProps = dispatch => ({\n  onUserSignUp: data => dispatch(UserSignUpStart(data))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);\n/*\r\nclass SignUp extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            displayName: '',\r\n            email : '',\r\n            password : '',\r\n            confirmPassword: ''\r\n        };\r\n    }\r\n\r\n     handleSubmit = async event =>\r\n    {\r\n        event.preventDefault();\r\n        const { displayName , email, password, confirmPassword } = this.state;\r\n       \r\n        if(password !== confirmPassword)\r\n        {\r\n            alert(\"password don't match\");\r\n            return;\r\n        }\r\n        this.props.onUserSignUp({displayName,email,password});\r\n    }\r\n\r\n    handleChange = event =>\r\n    {\r\n       const {name, value} = event.target;\r\n        this.setState({ [name] : value })\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"sign-up\">\r\n            <h2 className='title'>Don't have an account?</h2>\r\n            <span>Sign up with your name, email and password</span>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <FormInput \r\n                    type='text'\r\n                    name ='displayName'\r\n                    label=\"Display Name\"\r\n                    value = {this.state.displayName}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                <FormInput \r\n                    type='Email'\r\n                    name ='email'\r\n                    label=\"Email\"\r\n                    value = {this.state.email}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                <FormInput \r\n                    type='Password'\r\n                    name ='password'\r\n                    label=\"Password\"\r\n                    value = {this.state.password}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n                 <FormInput \r\n                    type='Password'\r\n                    name ='confirmPassword'\r\n                    label=\"Confirm Password\"\r\n                    value = {this.state.confirmPassword}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                <Button children=\"Sign Up\" type=\"submit\" className={\"custom-button\"}/>\r\n\r\n            </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onUserSignUp : (data) => dispatch(UserSignUpStart(data))\r\n});\r\n\r\nexport default connect(null,mapDispatchToProps)(SignUp);\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Components/SignUp/SignUp.component.js"],"names":["React","useState","FormInput","Button","UserSignUpStart","connect","render","SignUp","displayName","setDisplayName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","handleSubmit","event","preventDefault","alert","props","onUserSignUp","target","value","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './SignUp.style.scss';\r\nimport FormInput from '../FormInput/FormInput.component';\r\nimport Button from '../Button/Button.component';\r\nimport { UserSignUpStart } from '../../Redux/User/user-actions';\r\nimport { connect } from 'react-redux';\r\nimport { render } from 'node-sass';\r\n\r\n\r\nconst SignUp = () => {\r\n\r\n    const [ displayName, setDisplayName] = useState('');\r\n    const [ email, setEmail] = useState('');\r\n    const [ password, setPassword] = useState('');\r\n    const [ confirmPassword, setConfirmPassword] = useState('');\r\n\r\n\r\n    const handleSubmit = async event =>\r\n    {\r\n        event.preventDefault();\r\n       // const { displayName , email, password, confirmPassword } = this.state;\r\n    \r\n        if(password !== confirmPassword)\r\n        {\r\n            alert(\"password don't match\");\r\n            return;\r\n        }\r\n        \r\n        this.props.onUserSignUp({displayName,email,password});\r\n\r\n        setDisplayName('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setConfirmPassword('');\r\n    }\r\n\r\n    render(\r\n            <div className=\"sign-up\">\r\n            <h2 className='title'>Don't have an account?</h2>\r\n            <span>Sign up with your name, email and password</span>\r\n            <form onSubmit={handleSubmit}>\r\n                <FormInput \r\n                    type='text'\r\n                    name ='displayName'\r\n                    label=\"Display Name\"\r\n                    value = {displayName}\r\n                    onChange={(event) => setDisplayName(event.target.value)}\r\n                    required\r\n                    />\r\n\r\n                <FormInput \r\n                    type='Email'\r\n                    name ='email'\r\n                    label=\"Email\"\r\n                    value = {email}\r\n                    onChange={(event) => setEmail(event.target.value)}\r\n                    required\r\n                    />\r\n\r\n                <FormInput \r\n                    type='Password'\r\n                    name ='password'\r\n                    label=\"Password\"\r\n                    value = {password}\r\n                    onChange={(event) => setPassword(event.target.value)}\r\n                    required\r\n                    />\r\n                 <FormInput \r\n                    type='Password'\r\n                    name ='confirmPassword'\r\n                    label=\"Confirm Password\"\r\n                    value = {confirmPassword}\r\n                    onChange={(event) => setConfirmPassword(event.target.value)}\r\n                    required\r\n                    />\r\n\r\n                <Button children=\"Sign Up\" type=\"submit\" className={\"custom-button\"}/>\r\n            </form>\r\n            </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onUserSignUp : (data) => dispatch(UserSignUpStart(data))\r\n});\r\n\r\nexport default connect(null,mapDispatchToProps)(SignUp);\r\n\r\n\r\n/*\r\nclass SignUp extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            displayName: '',\r\n            email : '',\r\n            password : '',\r\n            confirmPassword: ''\r\n        };\r\n    }\r\n\r\n     handleSubmit = async event =>\r\n    {\r\n        event.preventDefault();\r\n        const { displayName , email, password, confirmPassword } = this.state;\r\n       \r\n        if(password !== confirmPassword)\r\n        {\r\n            alert(\"password don't match\");\r\n            return;\r\n        }\r\n        this.props.onUserSignUp({displayName,email,password});\r\n    }\r\n\r\n    handleChange = event =>\r\n    {\r\n       const {name, value} = event.target;\r\n        this.setState({ [name] : value })\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"sign-up\">\r\n            <h2 className='title'>Don't have an account?</h2>\r\n            <span>Sign up with your name, email and password</span>\r\n            <form onSubmit={this.handleSubmit}>\r\n                <FormInput \r\n                    type='text'\r\n                    name ='displayName'\r\n                    label=\"Display Name\"\r\n                    value = {this.state.displayName}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                <FormInput \r\n                    type='Email'\r\n                    name ='email'\r\n                    label=\"Email\"\r\n                    value = {this.state.email}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                <FormInput \r\n                    type='Password'\r\n                    name ='password'\r\n                    label=\"Password\"\r\n                    value = {this.state.password}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n                 <FormInput \r\n                    type='Password'\r\n                    name ='confirmPassword'\r\n                    label=\"Confirm Password\"\r\n                    value = {this.state.confirmPassword}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                <Button children=\"Sign Up\" type=\"submit\" className={\"custom-button\"}/>\r\n\r\n            </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onUserSignUp : (data) => dispatch(UserSignUpStart(data))\r\n});\r\n\r\nexport default connect(null,mapDispatchToProps)(SignUp);\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}