{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/compat/app';\nimport 'firebase//compat/firestore';\nimport 'firebase/compat/auth'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst config = {\n  apiKey: \"AIzaSyCaYbVR5sTfcAw8uQDEfdsv7t1gpScw0Iw\",\n  authDomain: \"crwndb-52b60.firebaseapp.com\",\n  projectId: \"crwndb-52b60\",\n  storageBucket: \"crwndb-52b60.appspot.com\",\n  messagingSenderId: \"604385462031\",\n  appId: \"1:604385462031:web:1554f8652d3b87d643a07a\"\n};\nexport const createUserProfileDocument = async (userAuth, aditionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`/users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...aditionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionID, dataToAdd) => {\n  const collectionRef = firestore.collection(collectionID);\n  const batch = firestore.batch();\n  dataToAdd.forEach(collection => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, collection);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((acuumulator, collection) => {\n    acuumulator[collection.title.toLowerCase()] = collection;\n    return acuumulator;\n  }, {});\n};\nexport const convertCollectionTypeSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      id,\n      imageUrl,\n      linkUrl,\n      size,\n      title,\n      url\n    } = doc.data();\n    return {\n      id: id,\n      title: title,\n      size: size,\n      imageUrl: imageUrl,\n      linkUrl: linkUrl,\n      url: url\n    };\n  });\n  transformedCollection.sort((a, b) => a.id > b.id ? 1 : -1);\n  return transformedCollection.reduce((acuumulator, collection) => {\n    acuumulator[collection.title.toLowerCase()] = collection;\n    return acuumulator;\n  }, {});\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const SignInWithGoogle = () => auth.signInWithPopup(provider);\n_c = SignInWithGoogle;\nexport default firebase;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInWithGoogle\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","aditionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","addCollectionAndDocuments","collectionID","dataToAdd","collectionRef","collection","batch","forEach","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routName","encodeURI","toLowerCase","id","reduce","acuumulator","convertCollectionTypeSnapshotToMap","imageUrl","linkUrl","size","url","sort","a","b","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","SignInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase//compat/firestore';\r\nimport 'firebase/compat/auth';\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst config = {\r\n  apiKey: \"AIzaSyCaYbVR5sTfcAw8uQDEfdsv7t1gpScw0Iw\",\r\n  authDomain: \"crwndb-52b60.firebaseapp.com\",\r\n  projectId: \"crwndb-52b60\",\r\n  storageBucket: \"crwndb-52b60.appspot.com\",\r\n  messagingSenderId: \"604385462031\",\r\n  appId: \"1:604385462031:web:1554f8652d3b87d643a07a\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, aditionalData) => {\r\n    \r\n    if(!userAuth)\r\n        return;\r\n\r\n    const userRef = firestore.doc(`/users/${userAuth.uid}`);\r\n    const snapshot = await userRef.get();\r\n\r\n    if(!snapshot.exists)\r\n    {\r\n      const { displayName, email } = userAuth;\r\n      const createdAt = new Date();\r\n      \r\n      try\r\n      {\r\n          await userRef.set({\r\n            displayName,\r\n            email,\r\n            createdAt,\r\n            ...aditionalData\r\n          });\r\n      }\r\n      catch (error) {\r\n        console.log('error creating user' , error);\r\n      }\r\n    }\r\n    return userRef;\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionID, dataToAdd) => \r\n{\r\n    const collectionRef = firestore.collection(collectionID);\r\n    const batch = firestore.batch();\r\n\r\n    \r\n    dataToAdd.forEach( collection => {\r\n      const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef,collection)\r\n    });\r\n    \r\n\r\n    return await batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = ( collections ) => {\r\n\r\n    const transformedCollection =   collections.docs.map( doc => {\r\n    \r\n    const { title, items } = doc.data();\r\n    \r\n    return {\r\n      routName : encodeURI(title.toLowerCase()),\r\n      id : doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  \r\n  });\r\n\r\n  return transformedCollection.reduce((acuumulator, collection) => {\r\n    acuumulator[collection.title.toLowerCase()] = collection;\r\n    return acuumulator;\r\n  }, {});\r\n\r\n};\r\n\r\n\r\nexport const convertCollectionTypeSnapshotToMap = ( collections ) => {\r\n\r\n  const transformedCollection =   collections.docs.map( doc => {\r\n  \r\n  const { id, imageUrl, linkUrl, size, title, url } = doc.data();\r\n  \r\n  return {\r\n    id : id,\r\n    title : title,\r\n    size: size,\r\n    imageUrl : imageUrl,\r\n    linkUrl : linkUrl,\r\n    url : url\r\n  };\r\n});\r\n\r\ntransformedCollection.sort((a,b) => a.id > b.id ? 1 : -1);\r\n\r\nreturn transformedCollection.reduce((acuumulator, collection) => {\r\n  acuumulator[collection.title.toLowerCase()] = collection;\r\n  return acuumulator;\r\n}, {});\r\n\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt: 'select_account'});\r\nexport const SignInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}