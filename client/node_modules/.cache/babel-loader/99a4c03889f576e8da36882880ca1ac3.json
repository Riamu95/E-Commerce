{"ast":null,"code":"import { collectionActionTypes } from \"./Collection.ActionTypes\";\nimport { firestore, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionStart = () => ({\n  type: collectionActionTypes.START_COLLECTION_UPDATE\n});\nexport const fetchCollectionSuccess = data => ({\n  type: collectionActionTypes.START_COLLECTION_UPDATE_SUCCESS,\n  payload: data\n});\nexport const fetchCollectionFailure = data => ({\n  type: collectionActionTypes.START_COLLECTION_UPDATE_FAIL,\n  error: data\n});\nexport const updateCollectionStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('CollectionTypes');\n    dispatch(fetchCollectionStart());\n    collectionRef.get().then(snap => {\n      const collections = convertCollectionTypeSnapshotToMap(snap);\n      dispatch(fetchCollectionSuccess(collections));\n    }).catch(err => dispatch(fetchCollectionFailure(err)));\n  };\n};","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Redux/Collections/Collection.Actions.js"],"names":["collectionActionTypes","firestore","convertCollectionTypeSnapshotToMap","fetchCollectionStart","type","START_COLLECTION_UPDATE","fetchCollectionSuccess","data","START_COLLECTION_UPDATE_SUCCESS","payload","fetchCollectionFailure","START_COLLECTION_UPDATE_FAIL","error","updateCollectionStartAsync","dispatch","collectionRef","collection","get","then","snap","collections","catch","err"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,0BAAtC;AACA,SAASC,SAAT,EAAoBC,kCAApB,QAA8D,+BAA9D;AAGA,OAAO,MAAMC,oBAAoB,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAGJ,qBAAqB,CAACK;AADM,CAAP,CAA7B;AAIP,OAAO,MAAMC,sBAAsB,GAAIC,IAAD,KAAW;AACzCH,EAAAA,IAAI,EAAGJ,qBAAqB,CAACQ,+BADY;AAEzCC,EAAAA,OAAO,EAAGF;AAF+B,CAAX,CAA/B;AAKP,OAAO,MAAMG,sBAAsB,GAAIH,IAAD,KAAW;AACzCH,EAAAA,IAAI,EAAGJ,qBAAqB,CAACW,4BADY;AAEzCC,EAAAA,KAAK,EAAGL;AAFiC,CAAX,CAA/B;AAKP,OAAO,MAAMM,0BAA0B,GAAG,MAAM;AACxC,SAAQC,QAAD,IAAc;AAEb,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,iBAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,oBAAoB,EAArB,CAAR;AAEAY,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,IAAI,IAAI;AAE7B,YAAMC,WAAW,GAAIlB,kCAAkC,CAACiB,IAAD,CAAvD;AACAL,MAAAA,QAAQ,CAACR,sBAAsB,CAACc,WAAD,CAAvB,CAAR;AACJ,KAJD,EAKCC,KALD,CAKOC,GAAG,IAAIR,QAAQ,CAACJ,sBAAsB,CAACY,GAAD,CAAvB,CALtB;AAMP,GAXD;AAYP,CAbM","sourcesContent":["import { collectionActionTypes } from \"./Collection.ActionTypes\";\r\nimport { firestore, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\r\n\r\n\r\nexport const fetchCollectionStart = () => ({\r\n        type : collectionActionTypes.START_COLLECTION_UPDATE\r\n});\r\n\r\nexport const fetchCollectionSuccess = (data) => ({\r\n        type : collectionActionTypes.START_COLLECTION_UPDATE_SUCCESS,\r\n        payload : data\r\n});\r\n\r\nexport const fetchCollectionFailure = (data) => ({\r\n        type : collectionActionTypes.START_COLLECTION_UPDATE_FAIL,\r\n        error : data\r\n});\r\n\r\nexport const updateCollectionStartAsync = () => {\r\n        return (dispatch) => {\r\n                \r\n                const collectionRef = firestore.collection('CollectionTypes')\r\n                dispatch(fetchCollectionStart())\r\n                \r\n                collectionRef.get().then( snap => {\r\n                        \r\n                     const collections =  convertCollectionTypeSnapshotToMap(snap);\r\n                     dispatch(fetchCollectionSuccess(collections));\r\n                })\r\n                .catch(err => dispatch(fetchCollectionFailure(err)));\r\n        }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}