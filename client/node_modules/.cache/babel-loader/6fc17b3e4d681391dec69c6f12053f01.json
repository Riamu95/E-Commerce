{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Predator\\\\Documents\\\\E-Commerce\\\\src\\\\Pages\\\\Shop\\\\Shop.component.js\";\nimport React from 'react';\nimport { Route, withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../Components/CollectionsOverview/CollectionsOverview.component';\nimport CollectionsPage from '../Collection/CollectionsPage.component';\nimport ItemPage from '../Item/ItemPage.component';\nimport WithSpinner from '../../Components/WithSpinner/WithSpinner.component';\nimport { getIsFetching } from '../../Redux/Shop/shop.selector';\nimport { updateCollectionAsync } from '../../Redux/Shop/shop.actions';\nimport { ShopActionTypes } from '../../Redux/Shop/shop.types';\nimport { convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { shopCollections } from '../../Redux/Shop/shop.selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewSpinner;\nconst CollectionsPageSpinner = WithSpinner(CollectionsPage);\n_c2 = CollectionsPageSpinner;\nconst ItemPageSpinner = WithSpinner(ItemPage);\n_c3 = ItemPageSpinner;\n\nclass Shop extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    console.log('SHOP MOUNTED');\n    this.props.updateCollections();\n  }\n\n  render() {\n    const {\n      match,\n      isFetching\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewSpinner, {\n          isLoading: isFetching,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 79\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}/:collectionId`,\n        render: props => /*#__PURE__*/_jsxDEV(CollectionsPageSpinner, {\n          isLoading: isFetching,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 97\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId/:itemId`,\n        render: props => /*#__PURE__*/_jsxDEV(ItemPageSpinner, {\n          isLoading: isFetching,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 96\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isFetching: getIsFetching(state),\n  shopItems: shopCollections(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: () => dispatch(updateCollectionAsync(ShopActionTypes, convertCollectionsSnapshotToMap))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Shop));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CollectionsOverviewSpinner\");\n$RefreshReg$(_c2, \"CollectionsPageSpinner\");\n$RefreshReg$(_c3, \"ItemPageSpinner\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Pages/Shop/Shop.component.js"],"names":["React","Route","withRouter","connect","CollectionsOverview","CollectionsPage","ItemPage","WithSpinner","getIsFetching","updateCollectionAsync","ShopActionTypes","convertCollectionsSnapshotToMap","shopCollections","CollectionsOverviewSpinner","CollectionsPageSpinner","ItemPageSpinner","Shop","Component","constructor","props","componentDidMount","console","log","updateCollections","render","match","isFetching","path","mapStateToProps","state","shopItems","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,cAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,oEAAhC;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAOC,WAAP,MAAwB,oDAAxB;AAEA,SAAQC,aAAR,QAA4B,gCAA5B;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAAUC,eAAV,QAAkC,6BAAlC;AACA,SAASC,+BAAT,QAAgD,+BAAhD;AACA,SAASC,eAAT,QAAgC,gCAAhC;;AAEA,MAAMC,0BAA0B,GAAGN,WAAW,CAACH,mBAAD,CAA9C;KAAMS,0B;AACN,MAAMC,sBAAsB,GAAGP,WAAW,CAACF,eAAD,CAA1C;MAAMS,sB;AACN,MAAMC,eAAe,GAAGR,WAAW,CAACD,QAAD,CAAnC;MAAMS,e;;AAGN,MAAMC,IAAN,SAAmBhB,KAAK,CAACiB,SAAzB,CAAoC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEFC,EAAAA,iBAAiB,GACjB;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAKH,KAAL,CAAWI,iBAAX;AACH;;AAEDC,EAAAA,MAAM,GACN;AACI,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKP,KAAlC;AACC,wBACQ;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEM,KAAK,CAACE,IAAK,EAAjC;AAAoC,QAAA,MAAM,EAAMR,KAAD,iBAAW,QAAC,0BAAD;AAA6B,UAAA,SAAS,EAAEO,UAAxC;AAAA,aAAwDP;AAAxD;AAAA;AAAA;AAAA;AAAA;AAA1D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAc,QAAA,IAAI,EAAK,GAAEM,KAAK,CAACE,IAAK,gBAApC;AAAsD,QAAA,MAAM,EAAMR,KAAD,iBAAW,QAAC,sBAAD;AAAyB,UAAA,SAAS,EAAEO,UAApC;AAAA,aAAoDP;AAApD;AAAA;AAAA;AAAA;AAAA;AAA5E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAQ,QAAA,IAAI,EAAK,GAAEM,KAAK,CAACE,IAAK,wBAA9B;AAAuD,QAAA,MAAM,EAAIR,KAAD,iBAAW,QAAC,eAAD;AAAiB,UAAA,SAAS,EAAEO,UAA5B;AAAA,aAA4CP;AAA5C;AAAA;AAAA;AAAA;AAAA;AAA3E;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADR;AAOJ;;AAtBgC;;AAyBpC,MAAMS,eAAe,GAAIC,KAAD,KAAY;AAChCH,EAAAA,UAAU,EAAGlB,aAAa,CAACqB,KAAD,CADM;AAEhCC,EAAAA,SAAS,EAAIlB,eAAe,CAACiB,KAAD;AAFI,CAAZ,CAAxB;;AAKA,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACpCT,EAAAA,iBAAiB,EAAG,MAAMS,QAAQ,CAACvB,qBAAqB,CAACC,eAAD,EAAiBC,+BAAjB,CAAtB;AADE,CAAL,CAAnC;;AAIA,eAAeT,UAAU,CAACC,OAAO,CAACyB,eAAD,EAAiBG,kBAAjB,CAAP,CAA4Cf,IAA5C,CAAD,CAAzB","sourcesContent":["import React from 'react';\r\n\r\nimport { Route, withRouter } from 'react-router';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverview from '../../Components/CollectionsOverview/CollectionsOverview.component';\r\nimport CollectionsPage from '../Collection/CollectionsPage.component';\r\nimport ItemPage from '../Item/ItemPage.component';\r\n\r\nimport WithSpinner from '../../Components/WithSpinner/WithSpinner.component';\r\n\r\nimport {getIsFetching} from '../../Redux/Shop/shop.selector';\r\nimport { updateCollectionAsync } from '../../Redux/Shop/shop.actions';\r\nimport {  ShopActionTypes } from  '../../Redux/Shop/shop.types';\r\nimport { convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { shopCollections } from '../../Redux/Shop/shop.selector';\r\n\r\nconst CollectionsOverviewSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionsPageSpinner = WithSpinner(CollectionsPage);\r\nconst ItemPageSpinner = WithSpinner(ItemPage);\r\n\r\n\r\nclass Shop extends React.Component  {\r\n   \r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n   componentDidMount()\r\n   {\r\n       console.log('SHOP MOUNTED');\r\n       this.props.updateCollections();\r\n   }\r\n   \r\n   render()\r\n   {\r\n       const {match, isFetching } = this.props;\r\n        return(\r\n                <div>\r\n                    <Route exact path={`${match.path}`} render = { (props) => <CollectionsOverviewSpinner  isLoading={isFetching} {...props} />}/>\r\n                    <Route exact  path = {`${match.path}/:collectionId`}  render = { (props) => <CollectionsPageSpinner  isLoading={isFetching} {...props} />}/>\r\n                    <Route  path = {`${match.path}/:collectionId/:itemId`} render={ (props) => <ItemPageSpinner isLoading={isFetching} {...props}/>}/> \r\n            </div>\r\n        );\r\n   }    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isFetching : getIsFetching(state),\r\n    shopItems :  shopCollections(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections : () => dispatch(updateCollectionAsync(ShopActionTypes,convertCollectionsSnapshotToMap))\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Shop));"]},"metadata":{},"sourceType":"module"}