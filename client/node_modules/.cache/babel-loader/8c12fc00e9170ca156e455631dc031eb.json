{"ast":null,"code":"import { all, call, takeLatest, put } from \"@redux-saga/core/effects\";\nimport { collectionActionTypes } from './Collection.ActionTypes';\nimport { firestore, getCollectionRef, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsStart, fetchCollectionSuccess, fetchCollectionFailure } from './CollectionActions';\n\nfunction* onCollectionUpdateStart() {\n  yield console.log('hiiii'); // const collectionRef =  yield firestore.collection('CollectionTypes');\n  //yield console.log(collectionRef);\n\n  /*yield put(fetchCollectionsStart());\r\n    try {\r\n      const snapshot = yield collectionRef.get();\r\n      const colllections = yield call(convertCollectionsSnapshotToMap(snapshot));\r\n      yield put(fetchCollectionSuccess(colllections));\r\n  }\r\n  catch (err) {\r\n      yield put(fetchCollectionFailure({ error: err}));\r\n  }\r\n  /*\r\n  collectionRef.get().then(async (snapshot) => {\r\n      const collections = await convertSnapshotToMap(snapshot);\r\n      dispatch(fetchCollectionSuccess(type,collections));\r\n  }).catch(err => dispatch(fetchCollectionFailure(type,err)));\r\n  */\n}\n\nfunction* CollectionStart() {\n  yield takeLatest(collectionActionTypes.UPDATE_COLLECTION_START, onCollectionUpdateStart);\n}\n\n_c = CollectionStart;\nexport function* collectionSaga() {\n  yield all([call(CollectionStart)]);\n}\n;\n/*\r\n\r\n\r\n\r\n\r\n\r\nexport const updateCollectionAsync = (colectionID, type, convertSnapshotToMap) => {\r\n    \r\n    return (dispatch) => {\r\n\r\n        const collectionRef = firestore.collection(colectionID);\r\n        dispatch(fetchCollectionsStart(type));\r\n\r\n        collectionRef.get().then(async (snapshot) => {\r\n            const collections = await convertSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionSuccess(type,collections));\r\n        }).catch(err => dispatch(fetchCollectionFailure(type,err)));\r\n    };\r\n};\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionStart\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Redux/Collections/CollectionSagas.js"],"names":["all","call","takeLatest","put","collectionActionTypes","firestore","getCollectionRef","convertCollectionsSnapshotToMap","fetchCollectionsStart","fetchCollectionSuccess","fetchCollectionFailure","onCollectionUpdateStart","console","log","CollectionStart","UPDATE_COLLECTION_START","collectionSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,0BAA3C;AACA,SAAWC,qBAAX,QAAwC,0BAAxC;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,+BAAtC,QAA6E,+BAA7E;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,EAAwDC,sBAAxD,QAAsF,qBAAtF;;AAGA,UAAUC,uBAAV,GACA;AACI,QAAMC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAN,CADJ,CAEG;AACC;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;;AAED,UAAUC,eAAV,GACA;AACI,QAAMZ,UAAU,CAACE,qBAAqB,CAACW,uBAAvB,EAA+CJ,uBAA/C,CAAhB;AACH;;KAHSG,e;AAKV,OAAO,UAAUE,cAAV,GAA2B;AAC9B,QAAMhB,GAAG,CAAC,CAACC,IAAI,CAACa,eAAD,CAAL,CAAD,CAAT;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, call, takeLatest, put } from \"@redux-saga/core/effects\";\r\nimport {   collectionActionTypes } from './Collection.ActionTypes';\r\nimport { firestore, getCollectionRef, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\r\nimport { fetchCollectionsStart, fetchCollectionSuccess, fetchCollectionFailure } from './CollectionActions';\r\n\r\n\r\nfunction* onCollectionUpdateStart()\r\n{\r\n    yield console.log('hiiii');\r\n   // const collectionRef =  yield firestore.collection('CollectionTypes');\r\n    //yield console.log(collectionRef);\r\n    /*yield put(fetchCollectionsStart());\r\n\r\n    try {\r\n        const snapshot = yield collectionRef.get();\r\n        const colllections = yield call(convertCollectionsSnapshotToMap(snapshot));\r\n        yield put(fetchCollectionSuccess(colllections));\r\n    }\r\n    catch (err) {\r\n        yield put(fetchCollectionFailure({ error: err}));\r\n    }\r\n    /*\r\n    collectionRef.get().then(async (snapshot) => {\r\n        const collections = await convertSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionSuccess(type,collections));\r\n    }).catch(err => dispatch(fetchCollectionFailure(type,err)));\r\n    */\r\n}\r\n\r\nfunction* CollectionStart()\r\n{\r\n    yield takeLatest(collectionActionTypes.UPDATE_COLLECTION_START,onCollectionUpdateStart);\r\n}\r\n\r\nexport function* collectionSaga() {\r\n    yield all([call(CollectionStart)])\r\n};\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n\r\nexport const updateCollectionAsync = (colectionID, type, convertSnapshotToMap) => {\r\n    \r\n    return (dispatch) => {\r\n\r\n        const collectionRef = firestore.collection(colectionID);\r\n        dispatch(fetchCollectionsStart(type));\r\n\r\n        collectionRef.get().then(async (snapshot) => {\r\n            const collections = await convertSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionSuccess(type,collections));\r\n        }).catch(err => dispatch(fetchCollectionFailure(type,err)));\r\n    };\r\n};\r\n*/"]},"metadata":{},"sourceType":"module"}