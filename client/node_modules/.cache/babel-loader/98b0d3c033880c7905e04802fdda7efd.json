{"ast":null,"code":"import { userActionTypes } from \"./UserAcionTypes\";\nimport { firestore, auth, provider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { put, takeEvery, takeLatest, all, call } from 'redux-saga/effects';\nimport { GoogleSignInSuccess, GoogleSignInFail, EmailSignInSuccess, EmailSignInFail } from \"./user-actions\";\nexport function* onGoogleStartSignIn() {\n  const userAuth = yield auth.signInWithPopup(provider);\n\n  if (userAuth) {\n    try {\n      const userRef = yield createUserProfileDocument(userAuth.user, '');\n      const userSnapshot = yield userRef.get();\n      yield put(GoogleSignInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot.data()\n      }));\n    } catch (err) {\n      yield put(GoogleSignInFail({\n        error: err\n      }));\n    }\n  }\n}\n;\nexport function* GoogleStartSignIn() {\n  yield takeLatest(userActionTypes.GOOGLE_START_SIGNIN, onGoogleStartSignIn);\n}\n_c = GoogleStartSignIn;\n;\nexport function* onEmailStartSignIn(data) {\n  try {\n    const userAuth = yield auth.signInWithEmailAndPassword(data.payload.email, data.payload.password);\n    const userRef = yield createUserProfileDocument(userAuth.user, '');\n    const snapshot = yield userRef.get();\n    yield put(EmailSignInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (err) {\n    yield put(EmailSignInFail({\n      error: err\n    }));\n  }\n}\n;\nexport function* EmailStartSignIn() {\n  yield takeLatest(userActionTypes.EMAIL_START_SIGNIN, onEmailStartSignIn);\n}\n_c2 = EmailStartSignIn;\n;\nexport function* userSagas() {\n  yield all([call(GoogleStartSignIn), call(EmailStartSignIn)]);\n}\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GoogleStartSignIn\");\n$RefreshReg$(_c2, \"EmailStartSignIn\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Redux/User/User-Sagas.js"],"names":["userActionTypes","firestore","auth","provider","createUserProfileDocument","put","takeEvery","takeLatest","all","call","GoogleSignInSuccess","GoogleSignInFail","EmailSignInSuccess","EmailSignInFail","onGoogleStartSignIn","userAuth","signInWithPopup","userRef","user","userSnapshot","get","id","data","err","error","GoogleStartSignIn","GOOGLE_START_SIGNIN","onEmailStartSignIn","signInWithEmailAndPassword","payload","email","password","snapshot","EmailStartSignIn","EMAIL_START_SIGNIN","userSagas"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,yBAApC,QAAqE,+BAArE;AACA,SAASC,GAAT,EAAcC,SAAd,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,kBAAhD,EAAoEC,eAApE,QAA2F,gBAA3F;AACA,OAAO,UAAUC,mBAAV,GACP;AACG,QAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACc,eAAL,CAAqBb,QAArB,CAAvB;;AACC,MAAGY,QAAH,EACA;AACI,QAAI;AACA,YAAME,OAAO,GAAG,MAAMb,yBAAyB,CAACW,QAAQ,CAACG,IAAV,EAAgB,EAAhB,CAA/C;AACA,YAAMC,YAAY,GAAG,MAAMF,OAAO,CAACG,GAAR,EAA3B;AACA,YAAMf,GAAG,CAACK,mBAAmB,CAAC;AAACW,QAAAA,EAAE,EAAGF,YAAY,CAACE,EAAnB;AAAuB,WAAGF,YAAY,CAACG,IAAb;AAA1B,OAAD,CAApB,CAAT;AACH,KAJD,CAIC,OAAMC,GAAN,EACD;AACI,YAAMlB,GAAG,CAACM,gBAAgB,CAAC;AAAEa,QAAAA,KAAK,EAAED;AAAT,OAAD,CAAjB,CAAT;AACH;AACJ;AACJ;AAAA;AAED,OAAO,UAAUE,iBAAV,GACP;AACG,QAAMlB,UAAU,CAACP,eAAe,CAAC0B,mBAAjB,EAAsCZ,mBAAtC,CAAhB;AACF;KAHgBW,iB;AAGhB;AAED,OAAO,UAAUE,kBAAV,CAA6BL,IAA7B,EACP;AAEI,MAAI;AACA,UAAMP,QAAQ,GAAG,MAAMb,IAAI,CAAC0B,0BAAL,CAAgCN,IAAI,CAACO,OAAL,CAAaC,KAA7C,EAAmDR,IAAI,CAACO,OAAL,CAAaE,QAAhE,CAAvB;AACC,UAAMd,OAAO,GAAG,MAAMb,yBAAyB,CAAEW,QAAQ,CAACG,IAAX,EAAiB,EAAjB,CAA/C;AACA,UAAMc,QAAQ,GAAG,MAAMf,OAAO,CAACG,GAAR,EAAvB;AACA,UAAMf,GAAG,CAACO,kBAAkB,CAAC;AAAES,MAAAA,EAAE,EAAGW,QAAQ,CAACX,EAAhB;AAAoB,SAAGW,QAAQ,CAACV,IAAT;AAAvB,KAAD,CAAnB,CAAT;AACJ,GALD,CAMA,OAAQC,GAAR,EAAa;AACT,UAAMlB,GAAG,CAACQ,eAAe,CAAC;AAAEW,MAAAA,KAAK,EAAED;AAAT,KAAD,CAAhB,CAAT;AACH;AAEJ;AAAA;AAED,OAAO,UAAUU,gBAAV,GACP;AACG,QAAM1B,UAAU,CAACP,eAAe,CAACkC,kBAAjB,EAAqCP,kBAArC,CAAhB;AACF;MAHgBM,gB;AAGhB;AAED,OAAO,UAAUE,SAAV,GACP;AACI,QAAM3B,GAAG,CAAC,CAACC,IAAI,CAACgB,iBAAD,CAAL,EAA0BhB,IAAI,CAACwB,gBAAD,CAA9B,CAAD,CAAT;AACH;AAAA","sourcesContent":["import { userActionTypes } from \"./UserAcionTypes\";\r\nimport { firestore, auth, provider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\nimport { put, takeEvery , takeLatest, all ,call } from 'redux-saga/effects';\r\nimport { GoogleSignInSuccess, GoogleSignInFail, EmailSignInSuccess, EmailSignInFail } from \"./user-actions\";\r\nexport function* onGoogleStartSignIn()\r\n{\r\n   const userAuth = yield auth.signInWithPopup(provider);\r\n    if(userAuth)\r\n    {\r\n        try {\r\n            const userRef = yield createUserProfileDocument(userAuth.user, '');\r\n            const userSnapshot = yield userRef.get();\r\n            yield put(GoogleSignInSuccess({id : userSnapshot.id, ...userSnapshot.data()}));\r\n        }catch(err)\r\n        {\r\n            yield put(GoogleSignInFail({ error: err}));\r\n        }\r\n    }\r\n};\r\n\r\nexport function* GoogleStartSignIn()\r\n{\r\n   yield takeLatest(userActionTypes.GOOGLE_START_SIGNIN, onGoogleStartSignIn);\r\n};\r\n\r\nexport function* onEmailStartSignIn(data)\r\n{\r\n  \r\n    try {\r\n        const userAuth = yield auth.signInWithEmailAndPassword(data.payload.email,data.payload.password);\r\n         const userRef = yield createUserProfileDocument( userAuth.user, '');\r\n         const snapshot = yield userRef.get();\r\n         yield put(EmailSignInSuccess({ id : snapshot.id, ...snapshot.data() }));\r\n    }\r\n    catch ( err) {\r\n        yield put(EmailSignInFail({ error: err}));\r\n    }\r\n   \r\n};\r\n\r\nexport function* EmailStartSignIn()\r\n{\r\n   yield takeLatest(userActionTypes.EMAIL_START_SIGNIN, onEmailStartSignIn);\r\n};\r\n\r\nexport function* userSagas()\r\n{\r\n    yield all([call(GoogleStartSignIn), call(EmailStartSignIn)]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}