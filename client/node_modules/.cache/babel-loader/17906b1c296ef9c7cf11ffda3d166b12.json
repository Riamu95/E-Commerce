{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CollectionItem from '../CollectionItem/CollectionItem.component';\nimport { connect, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { selectCollectionItems } from '../../Redux/Shop/shop.selector';\nimport { ReactComponent as LeftArrowLogo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../Assets/leftArrow.svg\";\nimport { ReactComponent as RightArrowLogo } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../Assets/rightArrow.svg\";\nimport { CollectionPreviewContainer, TitleContainer, PreviewContainer, LeftArrowContainer, RightArrowContainer } from './Collection-Preview.styles';\nimport WithSpinner from '../WithSpinner/WithSpinner.component';\nexport { LeftArrowLogo, RightArrowLogo };\n\nconst ColllectionPreview = ({\n  collectionCategory\n}) => {\n  _s();\n\n  const shopItems = useSelector(state => selectCollectionItems(collectionCategory.title)(state));\n  const [startIndex, setStartIndex] = useState(0);\n  const [endIndex, setEndIndex] = useState(3);\n  const [maxItems, setMaxItems] = useState(shopItems.items ? shopItems.items.length - 1 : 0);\n  const [previewCount, setPreviewCount] = useState(4);\n  const title = useState(collectionCategory.title);\n\n  const onArrowClick = direction => {\n    //max amount of items to preview on screen per category\n    const altpreviewCount = previewCount; //caluclate offset from array boundary to closest index based on direction\n\n    const diff = direction === 'right' ? maxItems - endIndex : (0 - startIndex) * -1; //if at array boundary do nothing\n\n    if (diff === 0) return null; //if array boundary is closer than the max amount 0of items we can display on screen\n    //move furthest index to render newest item\n    //move closest index to render the last item\n\n    diff <= altpreviewCount ? direction === 'left' ? this.setState({\n      endIndex: this.state.startIndex - 1,\n      startIndex: this.state.startIndex - diff\n    }) : this.setState({\n      startIndex: this.state.endIndex + 1,\n      endIndex: this.state.endIndex + diff\n    }) : direction === 'left' ? this.setState({\n      endIndex: this.state.startIndex - 1,\n      startIndex: this.state.startIndex - altpreviewCount\n    }) : this.setState({\n      startIndex: this.state.endIndex + 1,\n      endIndex: this.state.endIndex + altpreviewCount\n    });\n  };\n};\n\n_s(ColllectionPreview, \"KEBI7EMsz5alm2udtg6hnzRsIyg=\", false, function () {\n  return [useSelector];\n});\n\n_c = ColllectionPreview;\nexport default _c2 = withRouter(ColllectionPreview);\n/*\r\nclass  ColllectionPreview extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            startIndex : 0,\r\n            endIndex : 3,\r\n            maxItems :  props.shopItems.items?  props.shopItems.items.length -1 : 0,\r\n            previewCount  : 4,\r\n            title : this.props.collectionCategory.title\r\n        };\r\n    }\r\n\r\n   \r\n\r\n    onArrowClick = (direction) => {\r\n        //max amount of items to preview on screen per category\r\n        const previewCount = this.state.previewCount;\r\n        //caluclate offset from array boundary to closest index based on direction\r\n        const diff = direction  === 'right' ? (this.state.maxItems - this.state.endIndex) :  ((0 - this.state.startIndex) * -1);\r\n        //if at array boundary do nothing\r\n        if(diff === 0)\r\n            return null;\r\n            //if array boundary is closer than the max amount 0of items we can display on screen\r\n            //move furthest index to render newest item\r\n            //move closest index to render the last item\r\n            diff <= previewCount ?\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - diff}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + diff})\r\n            :\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - previewCount}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + previewCount})\r\n\r\n    };\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <CollectionPreviewContainer> \r\n                <TitleContainer  onClick={ () => this.props.history.push(`${this.props.match.url}/${this.state.title}`)}> {this.state.title.toUpperCase()}</TitleContainer>\r\n                <PreviewContainer>\r\n                    <LeftArrowContainer onClick={() => this.onArrowClick('left')}/>\r\n                   {                                          //render only the indexs we have chosen max of 4\r\n                        this.props.shopItems.items.filter((item, idx) => (idx >= this.state.startIndex && idx <= this.state.endIndex) )\r\n                        .map((item) => (\r\n                            <CollectionItem key={item.id} {...item} /> \r\n                        ))\r\n                    }\r\n                    <RightArrowContainer onClick={() => this.onArrowClick('right')}/>\r\n                </PreviewContainer>\r\n            </CollectionPreviewContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps) => ({\r\n    shopItems : selectCollectionItems(ownProps.collectionCategory.title)(state)\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, null)(ColllectionPreview));\r\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ColllectionPreview\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Components/Collection-Preview/CollectionPreview.component.js"],"names":["React","useState","CollectionItem","connect","useSelector","withRouter","selectCollectionItems","CollectionPreviewContainer","TitleContainer","PreviewContainer","LeftArrowContainer","RightArrowContainer","WithSpinner","LeftArrowLogo","RightArrowLogo","ColllectionPreview","collectionCategory","shopItems","state","title","startIndex","setStartIndex","endIndex","setEndIndex","maxItems","setMaxItems","items","length","previewCount","setPreviewCount","onArrowClick","direction","altpreviewCount","diff","setState"],"mappings":"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","sourcesContent":["  import React, { useState } from 'react';\r\nimport CollectionItem from '../CollectionItem/CollectionItem.component';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom'; \r\nimport {selectCollectionItems} from '../../Redux/Shop/shop.selector';\r\nimport { ReactComponent as LeftArrowLogo} from '../../Assets/leftArrow.svg';\r\nimport { ReactComponent as RightArrowLogo} from '../../Assets/rightArrow.svg';\r\nimport { CollectionPreviewContainer, TitleContainer , PreviewContainer, LeftArrowContainer, RightArrowContainer} from './Collection-Preview.styles';\r\nimport WithSpinner from '../WithSpinner/WithSpinner.component';\r\nexport  { LeftArrowLogo, RightArrowLogo };\r\n\r\nconst ColllectionPreview = ({ collectionCategory}) => \r\n{\r\n    const shopItems = useSelector((state) => selectCollectionItems(collectionCategory.title)(state))\r\n    const [startIndex, setStartIndex] = useState(0);\r\n    const [endIndex, setEndIndex] = useState(3);\r\n    const [maxItems, setMaxItems] = useState(shopItems.items?  shopItems.items.length -1 : 0);\r\n    const [previewCount,setPreviewCount] = useState(4);\r\n    const title = useState(collectionCategory.title);\r\n\r\n\r\n    const onArrowClick = (direction) => {\r\n        //max amount of items to preview on screen per category\r\n        const altpreviewCount = previewCount;\r\n        //caluclate offset from array boundary to closest index based on direction\r\n        const diff = direction  === 'right' ? (maxItems - endIndex) :  ((0 - startIndex) * -1);\r\n        //if at array boundary do nothing\r\n        if(diff === 0)\r\n            return null;\r\n            //if array boundary is closer than the max amount 0of items we can display on screen\r\n            //move furthest index to render newest item\r\n            //move closest index to render the last item\r\n            diff <= altpreviewCount ?\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - diff}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + diff})\r\n            :\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - altpreviewCount}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + altpreviewCount})\r\n\r\n    };\r\n\r\n};\r\n\r\nexport default withRouter(ColllectionPreview);\r\n\r\n\r\n/*\r\nclass  ColllectionPreview extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            startIndex : 0,\r\n            endIndex : 3,\r\n            maxItems :  props.shopItems.items?  props.shopItems.items.length -1 : 0,\r\n            previewCount  : 4,\r\n            title : this.props.collectionCategory.title\r\n        };\r\n    }\r\n\r\n   \r\n\r\n    onArrowClick = (direction) => {\r\n        //max amount of items to preview on screen per category\r\n        const previewCount = this.state.previewCount;\r\n        //caluclate offset from array boundary to closest index based on direction\r\n        const diff = direction  === 'right' ? (this.state.maxItems - this.state.endIndex) :  ((0 - this.state.startIndex) * -1);\r\n        //if at array boundary do nothing\r\n        if(diff === 0)\r\n            return null;\r\n            //if array boundary is closer than the max amount 0of items we can display on screen\r\n            //move furthest index to render newest item\r\n            //move closest index to render the last item\r\n            diff <= previewCount ?\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - diff}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + diff})\r\n            :\r\n                direction === 'left' ?  this.setState({ endIndex : this.state.startIndex - 1, startIndex : this.state.startIndex - previewCount}) :\r\n                this.setState({ startIndex : this.state.endIndex + 1, endIndex : this.state.endIndex + previewCount})\r\n\r\n    };\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <CollectionPreviewContainer> \r\n                <TitleContainer  onClick={ () => this.props.history.push(`${this.props.match.url}/${this.state.title}`)}> {this.state.title.toUpperCase()}</TitleContainer>\r\n                <PreviewContainer>\r\n                    <LeftArrowContainer onClick={() => this.onArrowClick('left')}/>\r\n                   {                                          //render only the indexs we have chosen max of 4\r\n                        this.props.shopItems.items.filter((item, idx) => (idx >= this.state.startIndex && idx <= this.state.endIndex) )\r\n                        .map((item) => (\r\n                            <CollectionItem key={item.id} {...item} /> \r\n                        ))\r\n                    }\r\n                    <RightArrowContainer onClick={() => this.onArrowClick('right')}/>\r\n                </PreviewContainer>\r\n            </CollectionPreviewContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps) => ({\r\n    shopItems : selectCollectionItems(ownProps.collectionCategory.title)(state)\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, null)(ColllectionPreview));\r\n*/"]},"metadata":{},"sourceType":"module"}