{"ast":null,"code":"import { userActionTypes } from \"./UserAcionTypes\";\nimport { auth, provider, createUserProfileDocument, getCurrentUser, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { put, takeLatest, all, call } from 'redux-saga/effects';\nimport { SignInSuccess, SignInFail, UserSignOutSuccess, UserSignOutFail, UserSignUp, UserSignUpStart, UserSignUpFail, UserSignUpSuccess } from \"./user-actions\";\n\nfunction* onGoogleStartSignIn() {\n  const userAuth = yield auth.signInWithPopup(provider);\n\n  if (userAuth) {\n    try {\n      const userRef = yield createUserProfileDocument(userAuth.user, '');\n      yield getSnapshotFromUserAuth(userRef.user);\n    } catch (err) {\n      yield put(SignInFail({\n        error: err\n      }));\n    }\n  }\n}\n\n;\n\nfunction* GoogleStartSignIn() {\n  yield takeLatest(userActionTypes.GOOGLE_START_SIGNIN, onGoogleStartSignIn);\n}\n\n_c = GoogleStartSignIn;\n;\n\nfunction* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user, '');\n    const snapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (err) {\n    yield put(SignInFail({\n      error: err\n    }));\n  }\n}\n\n;\n\nfunction* onEmailStartSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const userAuth = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(getSnapshotFromUserAuth, userAuth.user);\n  } catch (err) {\n    yield put(SignInFail({\n      error: err\n    }));\n  }\n}\n\n;\n\nfunction* onUserSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(UserSignOutSuccess());\n  } catch (err) {\n    yield put(UserSignOutFail({\n      error: err\n    }));\n  }\n}\n\n;\n\nfunction* EmailStartSignIn() {\n  yield takeLatest(userActionTypes.EMAIL_START_SIGNIN, onEmailStartSignIn);\n}\n\n_c2 = EmailStartSignIn;\n;\n\nfunction* UserSignOut() {\n  yield takeLatest(userActionTypes.USER_SIGN_OUT_START, onUserSignOut);\n}\n\n_c3 = UserSignOut;\n;\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFail(error));\n  }\n}\n\nfunction* onIsUserAuthenticated() {\n  yield takeLatest(userActionTypes.IS_USER_AUTHENTICATED, isUserAuthenticated);\n}\n\nfunction* onUserSignUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  yield put(UserSignUpStart());\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    const ref = yield call(createUserProfileDocument, user, {\n      displayName\n    });\n    const snap = yield ref.get();\n    console.log(' useer : ', user, ' snap  : ', snap); // yield put(UserSignUpSuccess({ id : user.uid, payload : ref}));\n  } catch (err) {\n    yield put(UserSignUpFail(err));\n  }\n\n  ;\n}\n\n;\n\nfunction* UserRegister() {\n  yield takeLatest(userActionTypes.USER_SIGN_UP, onUserSignUp);\n}\n\n_c4 = UserRegister;\n;\nexport function* userSagas() {\n  yield all([call(GoogleStartSignIn), call(EmailStartSignIn), call(UserSignOut), call(onIsUserAuthenticated), call(UserRegister)]);\n}\n;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"GoogleStartSignIn\");\n$RefreshReg$(_c2, \"EmailStartSignIn\");\n$RefreshReg$(_c3, \"UserSignOut\");\n$RefreshReg$(_c4, \"UserRegister\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Redux/User/User-Sagas.js"],"names":["userActionTypes","auth","provider","createUserProfileDocument","getCurrentUser","convertCollectionTypeSnapshotToMap","put","takeLatest","all","call","SignInSuccess","SignInFail","UserSignOutSuccess","UserSignOutFail","UserSignUp","UserSignUpStart","UserSignUpFail","UserSignUpSuccess","onGoogleStartSignIn","userAuth","signInWithPopup","userRef","user","getSnapshotFromUserAuth","err","error","GoogleStartSignIn","GOOGLE_START_SIGNIN","snapshot","get","id","data","onEmailStartSignIn","payload","email","password","signInWithEmailAndPassword","onUserSignOut","signOut","EmailStartSignIn","EMAIL_START_SIGNIN","UserSignOut","USER_SIGN_OUT_START","isUserAuthenticated","onIsUserAuthenticated","IS_USER_AUTHENTICATED","onUserSignUp","displayName","createUserWithEmailAndPassword","ref","snap","console","log","UserRegister","USER_SIGN_UP","userSagas"],"mappings":"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","sourcesContent":["import { userActionTypes } from \"./UserAcionTypes\";\r\nimport { auth, provider, createUserProfileDocument, getCurrentUser, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\r\nimport { put, takeLatest, all ,call } from 'redux-saga/effects';\r\nimport { SignInSuccess, SignInFail\r\n,  UserSignOutSuccess, UserSignOutFail, UserSignUp, UserSignUpStart, UserSignUpFail, UserSignUpSuccess } from \"./user-actions\";\r\n\r\nfunction* onGoogleStartSignIn()\r\n{\r\n   const userAuth = yield auth.signInWithPopup(provider);\r\n    if(userAuth)\r\n    {\r\n        try {\r\n            const userRef = yield createUserProfileDocument(userAuth.user, '');\r\n           yield getSnapshotFromUserAuth(userRef.user);\r\n        }catch(err)\r\n        {\r\n            yield put(SignInFail({ error: err}));\r\n        }\r\n    }\r\n};\r\n\r\nfunction* GoogleStartSignIn()\r\n{\r\n   yield takeLatest(userActionTypes.GOOGLE_START_SIGNIN, onGoogleStartSignIn);\r\n};\r\n\r\nfunction* getSnapshotFromUserAuth(user)\r\n{\r\n    try {\r\n         const userRef = yield call(createUserProfileDocument,user, '');\r\n         const snapshot = yield userRef.get();\r\n         yield put(SignInSuccess({ id : snapshot.id, ...snapshot.data() }));\r\n    }\r\n    catch (err) {\r\n        yield put(SignInFail({ error: err}));\r\n    }\r\n};\r\n\r\nfunction* onEmailStartSignIn({ payload : {email, password }})\r\n{\r\n    try {\r\n        const userAuth = yield auth.signInWithEmailAndPassword(email,password);\r\n        yield call(getSnapshotFromUserAuth,userAuth.user);\r\n    }\r\n    catch ( err) {\r\n        yield put(SignInFail({ error: err}));\r\n    }\r\n};\r\n\r\nfunction* onUserSignOut()\r\n{\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(UserSignOutSuccess());\r\n    }\r\n    catch ( err) {\r\n        yield put(UserSignOutFail({ error: err}));\r\n    }\r\n   \r\n};\r\n\r\nfunction* EmailStartSignIn()\r\n{\r\n   yield takeLatest(userActionTypes.EMAIL_START_SIGNIN, onEmailStartSignIn);\r\n};\r\n\r\nfunction* UserSignOut()\r\n{\r\n   yield takeLatest(userActionTypes.USER_SIGN_OUT_START, onUserSignOut);\r\n};\r\n\r\nfunction* isUserAuthenticated()\r\n{\r\n    try{\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    } catch (error) {\r\n    yield put(SignInFail(error));\r\n  }\r\n}\r\n\r\nfunction* onIsUserAuthenticated()\r\n{\r\n    yield takeLatest(userActionTypes.IS_USER_AUTHENTICATED, isUserAuthenticated)\r\n}\r\n\r\nfunction* onUserSignUp({payload : { email, password, displayName }})\r\n{\r\n    yield put(UserSignUpStart());\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n           password); \r\n       const ref = yield call(createUserProfileDocument, user, {displayName});\r\n       const snap = yield ref.get();\r\n            console.log(' useer : ' , user, ' snap  : ', snap);\r\n       // yield put(UserSignUpSuccess({ id : user.uid, payload : ref}));\r\n    }\r\n    catch (err) \r\n    {\r\n        yield put(UserSignUpFail(err));\r\n    }; \r\n};\r\n\r\nfunction* UserRegister()\r\n{\r\n    yield takeLatest(userActionTypes.USER_SIGN_UP, onUserSignUp);\r\n};\r\n\r\nexport function* userSagas()\r\n{\r\n    yield all([call(GoogleStartSignIn), call(EmailStartSignIn), call(UserSignOut), call(onIsUserAuthenticated), call(UserRegister)]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}