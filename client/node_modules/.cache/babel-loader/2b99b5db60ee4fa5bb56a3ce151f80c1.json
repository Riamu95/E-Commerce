{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Predator\\\\Documents\\\\E-Commerce\\\\src\\\\Components\\\\SignIn\\\\SignIn.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './SignIn.style.scss';\nimport FormInput from '../FormInput/FormInput.component';\nimport CustomButton from \"../Button/Button.component\";\nimport { GoogleStartSignIn, EmailStartSignIn } from '../../Redux/User/user-actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = ({\n  EmailSignIn\n}) => {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    EmailSignIn({\n      email,\n      password\n    });\n    setPassword('');\n    setEmail('');\n    this.setState({\n      email: '',\n      password: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"I Already have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"email\",\n        type: \"email\",\n        label: \"Email\",\n        value: email,\n        onChange: event => setEmail(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"password\",\n        type: \"password\",\n        label: \"Password\",\n        value: password,\n        onChange: event => setPassword(event.target.value),\n        reqiured: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          children: \"Sign In\",\n          type: \"submit\",\n          isGoogleSignIn: null,\n          onClick: this.handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          children: \"Sign In With Google\",\n          isGoogleSignIn: true,\n          onClick: this.props.GoogleSignIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignIn, \"TSZhDBNy8CmbxXgprY/vvMmTG1Q=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => ({\n  GoogleSignIn: () => dispatch(GoogleStartSignIn()),\n  EmailSignIn: data => dispatch(EmailStartSignIn(data))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Components/SignIn/SignIn.component.js"],"names":["React","useState","FormInput","CustomButton","GoogleStartSignIn","EmailStartSignIn","connect","SignIn","EmailSignIn","email","setEmail","password","setPassword","handleSubmit","event","preventDefault","setState","target","value","props","GoogleSignIn","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { useState} from 'react';\r\nimport './SignIn.style.scss';\r\nimport FormInput from '../FormInput/FormInput.component';\r\nimport CustomButton from \"../Button/Button.component\";\r\nimport { GoogleStartSignIn, EmailStartSignIn } from '../../Redux/User/user-actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst SignIn = ({EmailSignIn}) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n\r\n    const handleSubmit = async event =>\r\n    {   \r\n        event.preventDefault();\r\n        EmailSignIn({ email, password});\r\n        setPassword('');\r\n        setEmail('');\r\n        this.setState({email : '', password : ''});\r\n    }\r\n\r\n    return(\r\n        <div className=\"sign-in\">\r\n            <h2>I Already have an account</h2>\r\n            <span>Sign in with your email and password</span>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <FormInput \r\n                    name='email' \r\n                    type='email' \r\n                    label='Email'  \r\n                    value={email} \r\n                    onChange={(event) => setEmail(event.target.value)}\r\n                    required\r\n                />\r\n                \r\n                <FormInput \r\n                    name='password' \r\n                    type='password' \r\n                    label='Password' \r\n                    value={password} \r\n                    onChange={(event) => setPassword(event.target.value)} \r\n                    reqiured \r\n                />\r\n                <div className=\"buttons\">\r\n                    <CustomButton children ='Sign In' type=\"submit\" isGoogleSignIn={null} onClick={ this.handleSubmit }/>\r\n                    <CustomButton type='button' children ='Sign In With Google' isGoogleSignIn={true} onClick={ this.props.GoogleSignIn }/>\r\n                    </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => \r\n({\r\n    GoogleSignIn :  () => dispatch(GoogleStartSignIn()),\r\n    EmailSignIn :  (data) => dispatch(EmailStartSignIn(data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}