{"ast":null,"code":"import { all, call, takeLatest, put } from \"@redux-saga/core/effects\";\nimport { collectionActionTypes } from './Collection.ActionTypes';\nimport { firestore, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsStart, fetchCollectionSuccess, fetchCollectionFailure } from './CollectionActions';\n\nfunction* onCollectionUpdateStart() {\n  const collectionRef = yield firestore.collection('CollectionTypes');\n  yield put();\n\n  try {\n    const snapshot = yield collectionRef.get();\n    const colllections = yield call(convertCollectionTypeSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(colllections));\n  } catch (err) {\n    yield put(fetchCollectionFailure({\n      error: err\n    }));\n  }\n}\n\nfunction* CollectionStart() {\n  yield takeLatest(collectionActionTypes.ON_UPDATE_COLLECTION, onCollectionUpdateStart);\n}\n\n_c = CollectionStart;\nexport function* collectionSaga() {\n  yield all([call(CollectionStart)]);\n}\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionStart\");","map":{"version":3,"sources":["C:/Users/Predator/Documents/E-Commerce/src/Redux/Collections/CollectionSagas.js"],"names":["all","call","takeLatest","put","collectionActionTypes","firestore","convertCollectionTypeSnapshotToMap","fetchCollectionsStart","fetchCollectionSuccess","fetchCollectionFailure","onCollectionUpdateStart","collectionRef","collection","snapshot","get","colllections","err","error","CollectionStart","ON_UPDATE_COLLECTION","collectionSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,0BAA3C;AACA,SAAWC,qBAAX,QAAwC,0BAAxC;AACA,SAASC,SAAT,EAAoBC,kCAApB,QAA8D,+BAA9D;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,EAAwDC,sBAAxD,QAAsF,qBAAtF;;AAGA,UAAUC,uBAAV,GACA;AACI,QAAMC,aAAa,GAAI,MAAMN,SAAS,CAACO,UAAV,CAAqB,iBAArB,CAA7B;AACA,QAAMT,GAAG,EAAT;;AACA,MAAI;AACA,UAAMU,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,YAAY,GAAG,MAAMd,IAAI,CAACK,kCAAD,EAAoCO,QAApC,CAA/B;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,YAAD,CAAvB,CAAT;AACH,GAJD,CAKA,OAAOC,GAAP,EAAY;AACR,UAAMb,GAAG,CAACM,sBAAsB,CAAC;AAAEQ,MAAAA,KAAK,EAAED;AAAT,KAAD,CAAvB,CAAT;AACH;AACJ;;AAED,UAAUE,eAAV,GACA;AACI,QAAMhB,UAAU,CAACE,qBAAqB,CAACe,oBAAvB,EAA4CT,uBAA5C,CAAhB;AACH;;KAHSQ,e;AAKV,OAAO,UAAUE,cAAV,GAA2B;AAC9B,QAAMpB,GAAG,CAAC,CAACC,IAAI,CAACiB,eAAD,CAAL,CAAD,CAAT;AACH;AAAA","sourcesContent":["import { all, call, takeLatest, put } from \"@redux-saga/core/effects\";\r\nimport {   collectionActionTypes } from './Collection.ActionTypes';\r\nimport { firestore, convertCollectionTypeSnapshotToMap } from \"../../firebase/firebase.utils\";\r\nimport { fetchCollectionsStart, fetchCollectionSuccess, fetchCollectionFailure } from './CollectionActions';\r\n\r\n\r\nfunction* onCollectionUpdateStart()\r\n{\r\n    const collectionRef =  yield firestore.collection('CollectionTypes');\r\n    yield put()\r\n    try {\r\n        const snapshot = yield collectionRef.get();\r\n        const colllections = yield call(convertCollectionTypeSnapshotToMap,snapshot);\r\n        yield put(fetchCollectionSuccess(colllections));\r\n    }\r\n    catch (err) {\r\n        yield put(fetchCollectionFailure({ error: err}));\r\n    }\r\n}\r\n\r\nfunction* CollectionStart()\r\n{\r\n    yield takeLatest(collectionActionTypes.ON_UPDATE_COLLECTION,onCollectionUpdateStart);\r\n}\r\n\r\nexport function* collectionSaga() {\r\n    yield all([call(CollectionStart)])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}